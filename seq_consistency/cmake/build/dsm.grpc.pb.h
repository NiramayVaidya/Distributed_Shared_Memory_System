// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dsm.proto
#ifndef GRPC_dsm_2eproto__INCLUDED
#define GRPC_dsm_2eproto__INCLUDED

#include "dsm.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace dsm {

class Poll final {
 public:
  static constexpr char const* service_full_name() {
    return "dsm.Poll";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status poll(::grpc::ClientContext* context, const ::dsm::PollRequest& request, ::dsm::PollReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsm::PollReply>> Asyncpoll(::grpc::ClientContext* context, const ::dsm::PollRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsm::PollReply>>(AsyncpollRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsm::PollReply>> PrepareAsyncpoll(::grpc::ClientContext* context, const ::dsm::PollRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsm::PollReply>>(PrepareAsyncpollRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void poll(::grpc::ClientContext* context, const ::dsm::PollRequest* request, ::dsm::PollReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void poll(::grpc::ClientContext* context, const ::dsm::PollRequest* request, ::dsm::PollReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsm::PollReply>* AsyncpollRaw(::grpc::ClientContext* context, const ::dsm::PollRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsm::PollReply>* PrepareAsyncpollRaw(::grpc::ClientContext* context, const ::dsm::PollRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status poll(::grpc::ClientContext* context, const ::dsm::PollRequest& request, ::dsm::PollReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsm::PollReply>> Asyncpoll(::grpc::ClientContext* context, const ::dsm::PollRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsm::PollReply>>(AsyncpollRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsm::PollReply>> PrepareAsyncpoll(::grpc::ClientContext* context, const ::dsm::PollRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsm::PollReply>>(PrepareAsyncpollRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void poll(::grpc::ClientContext* context, const ::dsm::PollRequest* request, ::dsm::PollReply* response, std::function<void(::grpc::Status)>) override;
      void poll(::grpc::ClientContext* context, const ::dsm::PollRequest* request, ::dsm::PollReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::dsm::PollReply>* AsyncpollRaw(::grpc::ClientContext* context, const ::dsm::PollRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsm::PollReply>* PrepareAsyncpollRaw(::grpc::ClientContext* context, const ::dsm::PollRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_poll_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status poll(::grpc::ServerContext* context, const ::dsm::PollRequest* request, ::dsm::PollReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_poll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_poll() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_poll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status poll(::grpc::ServerContext* /*context*/, const ::dsm::PollRequest* /*request*/, ::dsm::PollReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestpoll(::grpc::ServerContext* context, ::dsm::PollRequest* request, ::grpc::ServerAsyncResponseWriter< ::dsm::PollReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_poll<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_poll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_poll() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::dsm::PollRequest, ::dsm::PollReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dsm::PollRequest* request, ::dsm::PollReply* response) { return this->poll(context, request, response); }));}
    void SetMessageAllocatorFor_poll(
        ::grpc::MessageAllocator< ::dsm::PollRequest, ::dsm::PollReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dsm::PollRequest, ::dsm::PollReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_poll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status poll(::grpc::ServerContext* /*context*/, const ::dsm::PollRequest* /*request*/, ::dsm::PollReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* poll(
      ::grpc::CallbackServerContext* /*context*/, const ::dsm::PollRequest* /*request*/, ::dsm::PollReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_poll<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_poll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_poll() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_poll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status poll(::grpc::ServerContext* /*context*/, const ::dsm::PollRequest* /*request*/, ::dsm::PollReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_poll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_poll() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_poll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status poll(::grpc::ServerContext* /*context*/, const ::dsm::PollRequest* /*request*/, ::dsm::PollReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestpoll(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_poll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_poll() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->poll(context, request, response); }));
    }
    ~WithRawCallbackMethod_poll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status poll(::grpc::ServerContext* /*context*/, const ::dsm::PollRequest* /*request*/, ::dsm::PollReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* poll(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_poll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_poll() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dsm::PollRequest, ::dsm::PollReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dsm::PollRequest, ::dsm::PollReply>* streamer) {
                       return this->Streamedpoll(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_poll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status poll(::grpc::ServerContext* /*context*/, const ::dsm::PollRequest* /*request*/, ::dsm::PollReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedpoll(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dsm::PollRequest,::dsm::PollReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_poll<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_poll<Service > StreamedService;
};

class RegDataSeg final {
 public:
  static constexpr char const* service_full_name() {
    return "dsm.RegDataSeg";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status regDataSeg(::grpc::ClientContext* context, const ::dsm::RegRequest& request, ::dsm::RegReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsm::RegReply>> AsyncregDataSeg(::grpc::ClientContext* context, const ::dsm::RegRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsm::RegReply>>(AsyncregDataSegRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsm::RegReply>> PrepareAsyncregDataSeg(::grpc::ClientContext* context, const ::dsm::RegRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsm::RegReply>>(PrepareAsyncregDataSegRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void regDataSeg(::grpc::ClientContext* context, const ::dsm::RegRequest* request, ::dsm::RegReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void regDataSeg(::grpc::ClientContext* context, const ::dsm::RegRequest* request, ::dsm::RegReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsm::RegReply>* AsyncregDataSegRaw(::grpc::ClientContext* context, const ::dsm::RegRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsm::RegReply>* PrepareAsyncregDataSegRaw(::grpc::ClientContext* context, const ::dsm::RegRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status regDataSeg(::grpc::ClientContext* context, const ::dsm::RegRequest& request, ::dsm::RegReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsm::RegReply>> AsyncregDataSeg(::grpc::ClientContext* context, const ::dsm::RegRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsm::RegReply>>(AsyncregDataSegRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsm::RegReply>> PrepareAsyncregDataSeg(::grpc::ClientContext* context, const ::dsm::RegRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsm::RegReply>>(PrepareAsyncregDataSegRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void regDataSeg(::grpc::ClientContext* context, const ::dsm::RegRequest* request, ::dsm::RegReply* response, std::function<void(::grpc::Status)>) override;
      void regDataSeg(::grpc::ClientContext* context, const ::dsm::RegRequest* request, ::dsm::RegReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::dsm::RegReply>* AsyncregDataSegRaw(::grpc::ClientContext* context, const ::dsm::RegRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsm::RegReply>* PrepareAsyncregDataSegRaw(::grpc::ClientContext* context, const ::dsm::RegRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_regDataSeg_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status regDataSeg(::grpc::ServerContext* context, const ::dsm::RegRequest* request, ::dsm::RegReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_regDataSeg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_regDataSeg() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_regDataSeg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status regDataSeg(::grpc::ServerContext* /*context*/, const ::dsm::RegRequest* /*request*/, ::dsm::RegReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregDataSeg(::grpc::ServerContext* context, ::dsm::RegRequest* request, ::grpc::ServerAsyncResponseWriter< ::dsm::RegReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_regDataSeg<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_regDataSeg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_regDataSeg() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::dsm::RegRequest, ::dsm::RegReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dsm::RegRequest* request, ::dsm::RegReply* response) { return this->regDataSeg(context, request, response); }));}
    void SetMessageAllocatorFor_regDataSeg(
        ::grpc::MessageAllocator< ::dsm::RegRequest, ::dsm::RegReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dsm::RegRequest, ::dsm::RegReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_regDataSeg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status regDataSeg(::grpc::ServerContext* /*context*/, const ::dsm::RegRequest* /*request*/, ::dsm::RegReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* regDataSeg(
      ::grpc::CallbackServerContext* /*context*/, const ::dsm::RegRequest* /*request*/, ::dsm::RegReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_regDataSeg<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_regDataSeg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_regDataSeg() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_regDataSeg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status regDataSeg(::grpc::ServerContext* /*context*/, const ::dsm::RegRequest* /*request*/, ::dsm::RegReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_regDataSeg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_regDataSeg() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_regDataSeg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status regDataSeg(::grpc::ServerContext* /*context*/, const ::dsm::RegRequest* /*request*/, ::dsm::RegReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregDataSeg(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_regDataSeg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_regDataSeg() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->regDataSeg(context, request, response); }));
    }
    ~WithRawCallbackMethod_regDataSeg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status regDataSeg(::grpc::ServerContext* /*context*/, const ::dsm::RegRequest* /*request*/, ::dsm::RegReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* regDataSeg(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_regDataSeg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_regDataSeg() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dsm::RegRequest, ::dsm::RegReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dsm::RegRequest, ::dsm::RegReply>* streamer) {
                       return this->StreamedregDataSeg(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_regDataSeg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status regDataSeg(::grpc::ServerContext* /*context*/, const ::dsm::RegRequest* /*request*/, ::dsm::RegReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedregDataSeg(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dsm::RegRequest,::dsm::RegReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_regDataSeg<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_regDataSeg<Service > StreamedService;
};

class DirUpd final {
 public:
  static constexpr char const* service_full_name() {
    return "dsm.DirUpd";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status dirUpd(::grpc::ClientContext* context, const ::dsm::UpdRequest& request, ::dsm::UpdReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsm::UpdReply>> AsyncdirUpd(::grpc::ClientContext* context, const ::dsm::UpdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsm::UpdReply>>(AsyncdirUpdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsm::UpdReply>> PrepareAsyncdirUpd(::grpc::ClientContext* context, const ::dsm::UpdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsm::UpdReply>>(PrepareAsyncdirUpdRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void dirUpd(::grpc::ClientContext* context, const ::dsm::UpdRequest* request, ::dsm::UpdReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void dirUpd(::grpc::ClientContext* context, const ::dsm::UpdRequest* request, ::dsm::UpdReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsm::UpdReply>* AsyncdirUpdRaw(::grpc::ClientContext* context, const ::dsm::UpdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsm::UpdReply>* PrepareAsyncdirUpdRaw(::grpc::ClientContext* context, const ::dsm::UpdRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status dirUpd(::grpc::ClientContext* context, const ::dsm::UpdRequest& request, ::dsm::UpdReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsm::UpdReply>> AsyncdirUpd(::grpc::ClientContext* context, const ::dsm::UpdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsm::UpdReply>>(AsyncdirUpdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsm::UpdReply>> PrepareAsyncdirUpd(::grpc::ClientContext* context, const ::dsm::UpdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsm::UpdReply>>(PrepareAsyncdirUpdRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void dirUpd(::grpc::ClientContext* context, const ::dsm::UpdRequest* request, ::dsm::UpdReply* response, std::function<void(::grpc::Status)>) override;
      void dirUpd(::grpc::ClientContext* context, const ::dsm::UpdRequest* request, ::dsm::UpdReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::dsm::UpdReply>* AsyncdirUpdRaw(::grpc::ClientContext* context, const ::dsm::UpdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsm::UpdReply>* PrepareAsyncdirUpdRaw(::grpc::ClientContext* context, const ::dsm::UpdRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_dirUpd_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status dirUpd(::grpc::ServerContext* context, const ::dsm::UpdRequest* request, ::dsm::UpdReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_dirUpd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_dirUpd() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_dirUpd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dirUpd(::grpc::ServerContext* /*context*/, const ::dsm::UpdRequest* /*request*/, ::dsm::UpdReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdirUpd(::grpc::ServerContext* context, ::dsm::UpdRequest* request, ::grpc::ServerAsyncResponseWriter< ::dsm::UpdReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_dirUpd<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_dirUpd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_dirUpd() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::dsm::UpdRequest, ::dsm::UpdReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dsm::UpdRequest* request, ::dsm::UpdReply* response) { return this->dirUpd(context, request, response); }));}
    void SetMessageAllocatorFor_dirUpd(
        ::grpc::MessageAllocator< ::dsm::UpdRequest, ::dsm::UpdReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dsm::UpdRequest, ::dsm::UpdReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_dirUpd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dirUpd(::grpc::ServerContext* /*context*/, const ::dsm::UpdRequest* /*request*/, ::dsm::UpdReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* dirUpd(
      ::grpc::CallbackServerContext* /*context*/, const ::dsm::UpdRequest* /*request*/, ::dsm::UpdReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_dirUpd<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_dirUpd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_dirUpd() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_dirUpd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dirUpd(::grpc::ServerContext* /*context*/, const ::dsm::UpdRequest* /*request*/, ::dsm::UpdReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_dirUpd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_dirUpd() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_dirUpd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dirUpd(::grpc::ServerContext* /*context*/, const ::dsm::UpdRequest* /*request*/, ::dsm::UpdReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdirUpd(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_dirUpd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_dirUpd() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->dirUpd(context, request, response); }));
    }
    ~WithRawCallbackMethod_dirUpd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dirUpd(::grpc::ServerContext* /*context*/, const ::dsm::UpdRequest* /*request*/, ::dsm::UpdReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* dirUpd(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_dirUpd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_dirUpd() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dsm::UpdRequest, ::dsm::UpdReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dsm::UpdRequest, ::dsm::UpdReply>* streamer) {
                       return this->StreameddirUpd(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_dirUpd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status dirUpd(::grpc::ServerContext* /*context*/, const ::dsm::UpdRequest* /*request*/, ::dsm::UpdReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddirUpd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dsm::UpdRequest,::dsm::UpdReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_dirUpd<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_dirUpd<Service > StreamedService;
};

class Invalidate final {
 public:
  static constexpr char const* service_full_name() {
    return "dsm.Invalidate";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status invalidate(::grpc::ClientContext* context, const ::dsm::InvalidateRequest& request, ::dsm::InvalidateReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsm::InvalidateReply>> Asyncinvalidate(::grpc::ClientContext* context, const ::dsm::InvalidateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsm::InvalidateReply>>(AsyncinvalidateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsm::InvalidateReply>> PrepareAsyncinvalidate(::grpc::ClientContext* context, const ::dsm::InvalidateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsm::InvalidateReply>>(PrepareAsyncinvalidateRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void invalidate(::grpc::ClientContext* context, const ::dsm::InvalidateRequest* request, ::dsm::InvalidateReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void invalidate(::grpc::ClientContext* context, const ::dsm::InvalidateRequest* request, ::dsm::InvalidateReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsm::InvalidateReply>* AsyncinvalidateRaw(::grpc::ClientContext* context, const ::dsm::InvalidateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsm::InvalidateReply>* PrepareAsyncinvalidateRaw(::grpc::ClientContext* context, const ::dsm::InvalidateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status invalidate(::grpc::ClientContext* context, const ::dsm::InvalidateRequest& request, ::dsm::InvalidateReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsm::InvalidateReply>> Asyncinvalidate(::grpc::ClientContext* context, const ::dsm::InvalidateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsm::InvalidateReply>>(AsyncinvalidateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsm::InvalidateReply>> PrepareAsyncinvalidate(::grpc::ClientContext* context, const ::dsm::InvalidateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsm::InvalidateReply>>(PrepareAsyncinvalidateRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void invalidate(::grpc::ClientContext* context, const ::dsm::InvalidateRequest* request, ::dsm::InvalidateReply* response, std::function<void(::grpc::Status)>) override;
      void invalidate(::grpc::ClientContext* context, const ::dsm::InvalidateRequest* request, ::dsm::InvalidateReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::dsm::InvalidateReply>* AsyncinvalidateRaw(::grpc::ClientContext* context, const ::dsm::InvalidateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsm::InvalidateReply>* PrepareAsyncinvalidateRaw(::grpc::ClientContext* context, const ::dsm::InvalidateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_invalidate_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status invalidate(::grpc::ServerContext* context, const ::dsm::InvalidateRequest* request, ::dsm::InvalidateReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_invalidate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_invalidate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_invalidate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status invalidate(::grpc::ServerContext* /*context*/, const ::dsm::InvalidateRequest* /*request*/, ::dsm::InvalidateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinvalidate(::grpc::ServerContext* context, ::dsm::InvalidateRequest* request, ::grpc::ServerAsyncResponseWriter< ::dsm::InvalidateReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_invalidate<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_invalidate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_invalidate() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::dsm::InvalidateRequest, ::dsm::InvalidateReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dsm::InvalidateRequest* request, ::dsm::InvalidateReply* response) { return this->invalidate(context, request, response); }));}
    void SetMessageAllocatorFor_invalidate(
        ::grpc::MessageAllocator< ::dsm::InvalidateRequest, ::dsm::InvalidateReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dsm::InvalidateRequest, ::dsm::InvalidateReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_invalidate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status invalidate(::grpc::ServerContext* /*context*/, const ::dsm::InvalidateRequest* /*request*/, ::dsm::InvalidateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* invalidate(
      ::grpc::CallbackServerContext* /*context*/, const ::dsm::InvalidateRequest* /*request*/, ::dsm::InvalidateReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_invalidate<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_invalidate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_invalidate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_invalidate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status invalidate(::grpc::ServerContext* /*context*/, const ::dsm::InvalidateRequest* /*request*/, ::dsm::InvalidateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_invalidate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_invalidate() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_invalidate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status invalidate(::grpc::ServerContext* /*context*/, const ::dsm::InvalidateRequest* /*request*/, ::dsm::InvalidateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinvalidate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_invalidate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_invalidate() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->invalidate(context, request, response); }));
    }
    ~WithRawCallbackMethod_invalidate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status invalidate(::grpc::ServerContext* /*context*/, const ::dsm::InvalidateRequest* /*request*/, ::dsm::InvalidateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* invalidate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_invalidate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_invalidate() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dsm::InvalidateRequest, ::dsm::InvalidateReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dsm::InvalidateRequest, ::dsm::InvalidateReply>* streamer) {
                       return this->Streamedinvalidate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_invalidate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status invalidate(::grpc::ServerContext* /*context*/, const ::dsm::InvalidateRequest* /*request*/, ::dsm::InvalidateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedinvalidate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dsm::InvalidateRequest,::dsm::InvalidateReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_invalidate<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_invalidate<Service > StreamedService;
};

class GetLatest final {
 public:
  static constexpr char const* service_full_name() {
    return "dsm.GetLatest";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status getLatest(::grpc::ClientContext* context, const ::dsm::LatestRequest& request, ::dsm::LatestReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsm::LatestReply>> AsyncgetLatest(::grpc::ClientContext* context, const ::dsm::LatestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsm::LatestReply>>(AsyncgetLatestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsm::LatestReply>> PrepareAsyncgetLatest(::grpc::ClientContext* context, const ::dsm::LatestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsm::LatestReply>>(PrepareAsyncgetLatestRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void getLatest(::grpc::ClientContext* context, const ::dsm::LatestRequest* request, ::dsm::LatestReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getLatest(::grpc::ClientContext* context, const ::dsm::LatestRequest* request, ::dsm::LatestReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsm::LatestReply>* AsyncgetLatestRaw(::grpc::ClientContext* context, const ::dsm::LatestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsm::LatestReply>* PrepareAsyncgetLatestRaw(::grpc::ClientContext* context, const ::dsm::LatestRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status getLatest(::grpc::ClientContext* context, const ::dsm::LatestRequest& request, ::dsm::LatestReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsm::LatestReply>> AsyncgetLatest(::grpc::ClientContext* context, const ::dsm::LatestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsm::LatestReply>>(AsyncgetLatestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsm::LatestReply>> PrepareAsyncgetLatest(::grpc::ClientContext* context, const ::dsm::LatestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsm::LatestReply>>(PrepareAsyncgetLatestRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void getLatest(::grpc::ClientContext* context, const ::dsm::LatestRequest* request, ::dsm::LatestReply* response, std::function<void(::grpc::Status)>) override;
      void getLatest(::grpc::ClientContext* context, const ::dsm::LatestRequest* request, ::dsm::LatestReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::dsm::LatestReply>* AsyncgetLatestRaw(::grpc::ClientContext* context, const ::dsm::LatestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsm::LatestReply>* PrepareAsyncgetLatestRaw(::grpc::ClientContext* context, const ::dsm::LatestRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getLatest_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status getLatest(::grpc::ServerContext* context, const ::dsm::LatestRequest* request, ::dsm::LatestReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getLatest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getLatest() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getLatest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLatest(::grpc::ServerContext* /*context*/, const ::dsm::LatestRequest* /*request*/, ::dsm::LatestReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetLatest(::grpc::ServerContext* context, ::dsm::LatestRequest* request, ::grpc::ServerAsyncResponseWriter< ::dsm::LatestReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getLatest<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_getLatest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getLatest() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::dsm::LatestRequest, ::dsm::LatestReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dsm::LatestRequest* request, ::dsm::LatestReply* response) { return this->getLatest(context, request, response); }));}
    void SetMessageAllocatorFor_getLatest(
        ::grpc::MessageAllocator< ::dsm::LatestRequest, ::dsm::LatestReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dsm::LatestRequest, ::dsm::LatestReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getLatest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLatest(::grpc::ServerContext* /*context*/, const ::dsm::LatestRequest* /*request*/, ::dsm::LatestReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getLatest(
      ::grpc::CallbackServerContext* /*context*/, const ::dsm::LatestRequest* /*request*/, ::dsm::LatestReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_getLatest<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_getLatest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getLatest() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getLatest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLatest(::grpc::ServerContext* /*context*/, const ::dsm::LatestRequest* /*request*/, ::dsm::LatestReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getLatest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getLatest() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getLatest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLatest(::grpc::ServerContext* /*context*/, const ::dsm::LatestRequest* /*request*/, ::dsm::LatestReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetLatest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getLatest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getLatest() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getLatest(context, request, response); }));
    }
    ~WithRawCallbackMethod_getLatest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLatest(::grpc::ServerContext* /*context*/, const ::dsm::LatestRequest* /*request*/, ::dsm::LatestReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getLatest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getLatest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getLatest() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dsm::LatestRequest, ::dsm::LatestReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dsm::LatestRequest, ::dsm::LatestReply>* streamer) {
                       return this->StreamedgetLatest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getLatest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getLatest(::grpc::ServerContext* /*context*/, const ::dsm::LatestRequest* /*request*/, ::dsm::LatestReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetLatest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dsm::LatestRequest,::dsm::LatestReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getLatest<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_getLatest<Service > StreamedService;
};

class FetchLatest final {
 public:
  static constexpr char const* service_full_name() {
    return "dsm.FetchLatest";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status fetchLatest(::grpc::ClientContext* context, const ::dsm::FetchRequest& request, ::dsm::FetchReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsm::FetchReply>> AsyncfetchLatest(::grpc::ClientContext* context, const ::dsm::FetchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsm::FetchReply>>(AsyncfetchLatestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsm::FetchReply>> PrepareAsyncfetchLatest(::grpc::ClientContext* context, const ::dsm::FetchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsm::FetchReply>>(PrepareAsyncfetchLatestRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void fetchLatest(::grpc::ClientContext* context, const ::dsm::FetchRequest* request, ::dsm::FetchReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void fetchLatest(::grpc::ClientContext* context, const ::dsm::FetchRequest* request, ::dsm::FetchReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsm::FetchReply>* AsyncfetchLatestRaw(::grpc::ClientContext* context, const ::dsm::FetchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsm::FetchReply>* PrepareAsyncfetchLatestRaw(::grpc::ClientContext* context, const ::dsm::FetchRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status fetchLatest(::grpc::ClientContext* context, const ::dsm::FetchRequest& request, ::dsm::FetchReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsm::FetchReply>> AsyncfetchLatest(::grpc::ClientContext* context, const ::dsm::FetchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsm::FetchReply>>(AsyncfetchLatestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsm::FetchReply>> PrepareAsyncfetchLatest(::grpc::ClientContext* context, const ::dsm::FetchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsm::FetchReply>>(PrepareAsyncfetchLatestRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void fetchLatest(::grpc::ClientContext* context, const ::dsm::FetchRequest* request, ::dsm::FetchReply* response, std::function<void(::grpc::Status)>) override;
      void fetchLatest(::grpc::ClientContext* context, const ::dsm::FetchRequest* request, ::dsm::FetchReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::dsm::FetchReply>* AsyncfetchLatestRaw(::grpc::ClientContext* context, const ::dsm::FetchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsm::FetchReply>* PrepareAsyncfetchLatestRaw(::grpc::ClientContext* context, const ::dsm::FetchRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_fetchLatest_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status fetchLatest(::grpc::ServerContext* context, const ::dsm::FetchRequest* request, ::dsm::FetchReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_fetchLatest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_fetchLatest() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_fetchLatest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fetchLatest(::grpc::ServerContext* /*context*/, const ::dsm::FetchRequest* /*request*/, ::dsm::FetchReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfetchLatest(::grpc::ServerContext* context, ::dsm::FetchRequest* request, ::grpc::ServerAsyncResponseWriter< ::dsm::FetchReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_fetchLatest<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_fetchLatest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_fetchLatest() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::dsm::FetchRequest, ::dsm::FetchReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dsm::FetchRequest* request, ::dsm::FetchReply* response) { return this->fetchLatest(context, request, response); }));}
    void SetMessageAllocatorFor_fetchLatest(
        ::grpc::MessageAllocator< ::dsm::FetchRequest, ::dsm::FetchReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dsm::FetchRequest, ::dsm::FetchReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_fetchLatest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fetchLatest(::grpc::ServerContext* /*context*/, const ::dsm::FetchRequest* /*request*/, ::dsm::FetchReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* fetchLatest(
      ::grpc::CallbackServerContext* /*context*/, const ::dsm::FetchRequest* /*request*/, ::dsm::FetchReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_fetchLatest<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_fetchLatest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_fetchLatest() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_fetchLatest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fetchLatest(::grpc::ServerContext* /*context*/, const ::dsm::FetchRequest* /*request*/, ::dsm::FetchReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_fetchLatest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_fetchLatest() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_fetchLatest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fetchLatest(::grpc::ServerContext* /*context*/, const ::dsm::FetchRequest* /*request*/, ::dsm::FetchReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfetchLatest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_fetchLatest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_fetchLatest() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->fetchLatest(context, request, response); }));
    }
    ~WithRawCallbackMethod_fetchLatest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fetchLatest(::grpc::ServerContext* /*context*/, const ::dsm::FetchRequest* /*request*/, ::dsm::FetchReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* fetchLatest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_fetchLatest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_fetchLatest() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dsm::FetchRequest, ::dsm::FetchReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dsm::FetchRequest, ::dsm::FetchReply>* streamer) {
                       return this->StreamedfetchLatest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_fetchLatest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status fetchLatest(::grpc::ServerContext* /*context*/, const ::dsm::FetchRequest* /*request*/, ::dsm::FetchReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedfetchLatest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dsm::FetchRequest,::dsm::FetchReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_fetchLatest<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_fetchLatest<Service > StreamedService;
};

}  // namespace dsm


#endif  // GRPC_dsm_2eproto__INCLUDED
