// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mutex.proto
#ifndef GRPC_mutex_2eproto__INCLUDED
#define GRPC_mutex_2eproto__INCLUDED

#include "mutex.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace mutex {

class Poll final {
 public:
  static constexpr char const* service_full_name() {
    return "mutex.Poll";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status poll(::grpc::ClientContext* context, const ::mutex::PollRequest& request, ::mutex::PollReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mutex::PollReply>> Asyncpoll(::grpc::ClientContext* context, const ::mutex::PollRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mutex::PollReply>>(AsyncpollRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mutex::PollReply>> PrepareAsyncpoll(::grpc::ClientContext* context, const ::mutex::PollRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mutex::PollReply>>(PrepareAsyncpollRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void poll(::grpc::ClientContext* context, const ::mutex::PollRequest* request, ::mutex::PollReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void poll(::grpc::ClientContext* context, const ::mutex::PollRequest* request, ::mutex::PollReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mutex::PollReply>* AsyncpollRaw(::grpc::ClientContext* context, const ::mutex::PollRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mutex::PollReply>* PrepareAsyncpollRaw(::grpc::ClientContext* context, const ::mutex::PollRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status poll(::grpc::ClientContext* context, const ::mutex::PollRequest& request, ::mutex::PollReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mutex::PollReply>> Asyncpoll(::grpc::ClientContext* context, const ::mutex::PollRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mutex::PollReply>>(AsyncpollRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mutex::PollReply>> PrepareAsyncpoll(::grpc::ClientContext* context, const ::mutex::PollRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mutex::PollReply>>(PrepareAsyncpollRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void poll(::grpc::ClientContext* context, const ::mutex::PollRequest* request, ::mutex::PollReply* response, std::function<void(::grpc::Status)>) override;
      void poll(::grpc::ClientContext* context, const ::mutex::PollRequest* request, ::mutex::PollReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mutex::PollReply>* AsyncpollRaw(::grpc::ClientContext* context, const ::mutex::PollRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mutex::PollReply>* PrepareAsyncpollRaw(::grpc::ClientContext* context, const ::mutex::PollRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_poll_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status poll(::grpc::ServerContext* context, const ::mutex::PollRequest* request, ::mutex::PollReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_poll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_poll() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_poll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status poll(::grpc::ServerContext* /*context*/, const ::mutex::PollRequest* /*request*/, ::mutex::PollReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestpoll(::grpc::ServerContext* context, ::mutex::PollRequest* request, ::grpc::ServerAsyncResponseWriter< ::mutex::PollReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_poll<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_poll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_poll() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::mutex::PollRequest, ::mutex::PollReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mutex::PollRequest* request, ::mutex::PollReply* response) { return this->poll(context, request, response); }));}
    void SetMessageAllocatorFor_poll(
        ::grpc::MessageAllocator< ::mutex::PollRequest, ::mutex::PollReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mutex::PollRequest, ::mutex::PollReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_poll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status poll(::grpc::ServerContext* /*context*/, const ::mutex::PollRequest* /*request*/, ::mutex::PollReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* poll(
      ::grpc::CallbackServerContext* /*context*/, const ::mutex::PollRequest* /*request*/, ::mutex::PollReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_poll<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_poll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_poll() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_poll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status poll(::grpc::ServerContext* /*context*/, const ::mutex::PollRequest* /*request*/, ::mutex::PollReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_poll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_poll() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_poll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status poll(::grpc::ServerContext* /*context*/, const ::mutex::PollRequest* /*request*/, ::mutex::PollReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestpoll(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_poll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_poll() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->poll(context, request, response); }));
    }
    ~WithRawCallbackMethod_poll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status poll(::grpc::ServerContext* /*context*/, const ::mutex::PollRequest* /*request*/, ::mutex::PollReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* poll(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_poll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_poll() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mutex::PollRequest, ::mutex::PollReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mutex::PollRequest, ::mutex::PollReply>* streamer) {
                       return this->Streamedpoll(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_poll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status poll(::grpc::ServerContext* /*context*/, const ::mutex::PollRequest* /*request*/, ::mutex::PollReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedpoll(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mutex::PollRequest,::mutex::PollReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_poll<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_poll<Service > StreamedService;
};

class RecvRequest final {
 public:
  static constexpr char const* service_full_name() {
    return "mutex.RecvRequest";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status recvRequest(::grpc::ClientContext* context, const ::mutex::RecvReq& request, ::mutex::RecvReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mutex::RecvReply>> AsyncrecvRequest(::grpc::ClientContext* context, const ::mutex::RecvReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mutex::RecvReply>>(AsyncrecvRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mutex::RecvReply>> PrepareAsyncrecvRequest(::grpc::ClientContext* context, const ::mutex::RecvReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mutex::RecvReply>>(PrepareAsyncrecvRequestRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void recvRequest(::grpc::ClientContext* context, const ::mutex::RecvReq* request, ::mutex::RecvReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void recvRequest(::grpc::ClientContext* context, const ::mutex::RecvReq* request, ::mutex::RecvReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mutex::RecvReply>* AsyncrecvRequestRaw(::grpc::ClientContext* context, const ::mutex::RecvReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mutex::RecvReply>* PrepareAsyncrecvRequestRaw(::grpc::ClientContext* context, const ::mutex::RecvReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status recvRequest(::grpc::ClientContext* context, const ::mutex::RecvReq& request, ::mutex::RecvReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mutex::RecvReply>> AsyncrecvRequest(::grpc::ClientContext* context, const ::mutex::RecvReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mutex::RecvReply>>(AsyncrecvRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mutex::RecvReply>> PrepareAsyncrecvRequest(::grpc::ClientContext* context, const ::mutex::RecvReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mutex::RecvReply>>(PrepareAsyncrecvRequestRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void recvRequest(::grpc::ClientContext* context, const ::mutex::RecvReq* request, ::mutex::RecvReply* response, std::function<void(::grpc::Status)>) override;
      void recvRequest(::grpc::ClientContext* context, const ::mutex::RecvReq* request, ::mutex::RecvReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mutex::RecvReply>* AsyncrecvRequestRaw(::grpc::ClientContext* context, const ::mutex::RecvReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mutex::RecvReply>* PrepareAsyncrecvRequestRaw(::grpc::ClientContext* context, const ::mutex::RecvReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_recvRequest_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status recvRequest(::grpc::ServerContext* context, const ::mutex::RecvReq* request, ::mutex::RecvReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_recvRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_recvRequest() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_recvRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recvRequest(::grpc::ServerContext* /*context*/, const ::mutex::RecvReq* /*request*/, ::mutex::RecvReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrecvRequest(::grpc::ServerContext* context, ::mutex::RecvReq* request, ::grpc::ServerAsyncResponseWriter< ::mutex::RecvReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_recvRequest<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_recvRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_recvRequest() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::mutex::RecvReq, ::mutex::RecvReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mutex::RecvReq* request, ::mutex::RecvReply* response) { return this->recvRequest(context, request, response); }));}
    void SetMessageAllocatorFor_recvRequest(
        ::grpc::MessageAllocator< ::mutex::RecvReq, ::mutex::RecvReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mutex::RecvReq, ::mutex::RecvReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_recvRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recvRequest(::grpc::ServerContext* /*context*/, const ::mutex::RecvReq* /*request*/, ::mutex::RecvReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* recvRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::mutex::RecvReq* /*request*/, ::mutex::RecvReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_recvRequest<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_recvRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_recvRequest() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_recvRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recvRequest(::grpc::ServerContext* /*context*/, const ::mutex::RecvReq* /*request*/, ::mutex::RecvReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_recvRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_recvRequest() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_recvRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recvRequest(::grpc::ServerContext* /*context*/, const ::mutex::RecvReq* /*request*/, ::mutex::RecvReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrecvRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_recvRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_recvRequest() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->recvRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_recvRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recvRequest(::grpc::ServerContext* /*context*/, const ::mutex::RecvReq* /*request*/, ::mutex::RecvReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* recvRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_recvRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_recvRequest() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mutex::RecvReq, ::mutex::RecvReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mutex::RecvReq, ::mutex::RecvReply>* streamer) {
                       return this->StreamedrecvRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_recvRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status recvRequest(::grpc::ServerContext* /*context*/, const ::mutex::RecvReq* /*request*/, ::mutex::RecvReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrecvRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mutex::RecvReq,::mutex::RecvReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_recvRequest<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_recvRequest<Service > StreamedService;
};

class SendDefReply final {
 public:
  static constexpr char const* service_full_name() {
    return "mutex.SendDefReply";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status sendDefRep(::grpc::ClientContext* context, const ::mutex::DefRep& request, ::mutex::DefReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mutex::DefReply>> AsyncsendDefRep(::grpc::ClientContext* context, const ::mutex::DefRep& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mutex::DefReply>>(AsyncsendDefRepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mutex::DefReply>> PrepareAsyncsendDefRep(::grpc::ClientContext* context, const ::mutex::DefRep& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mutex::DefReply>>(PrepareAsyncsendDefRepRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void sendDefRep(::grpc::ClientContext* context, const ::mutex::DefRep* request, ::mutex::DefReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendDefRep(::grpc::ClientContext* context, const ::mutex::DefRep* request, ::mutex::DefReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mutex::DefReply>* AsyncsendDefRepRaw(::grpc::ClientContext* context, const ::mutex::DefRep& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mutex::DefReply>* PrepareAsyncsendDefRepRaw(::grpc::ClientContext* context, const ::mutex::DefRep& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status sendDefRep(::grpc::ClientContext* context, const ::mutex::DefRep& request, ::mutex::DefReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mutex::DefReply>> AsyncsendDefRep(::grpc::ClientContext* context, const ::mutex::DefRep& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mutex::DefReply>>(AsyncsendDefRepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mutex::DefReply>> PrepareAsyncsendDefRep(::grpc::ClientContext* context, const ::mutex::DefRep& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mutex::DefReply>>(PrepareAsyncsendDefRepRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void sendDefRep(::grpc::ClientContext* context, const ::mutex::DefRep* request, ::mutex::DefReply* response, std::function<void(::grpc::Status)>) override;
      void sendDefRep(::grpc::ClientContext* context, const ::mutex::DefRep* request, ::mutex::DefReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mutex::DefReply>* AsyncsendDefRepRaw(::grpc::ClientContext* context, const ::mutex::DefRep& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mutex::DefReply>* PrepareAsyncsendDefRepRaw(::grpc::ClientContext* context, const ::mutex::DefRep& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_sendDefRep_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status sendDefRep(::grpc::ServerContext* context, const ::mutex::DefRep* request, ::mutex::DefReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_sendDefRep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_sendDefRep() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_sendDefRep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendDefRep(::grpc::ServerContext* /*context*/, const ::mutex::DefRep* /*request*/, ::mutex::DefReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendDefRep(::grpc::ServerContext* context, ::mutex::DefRep* request, ::grpc::ServerAsyncResponseWriter< ::mutex::DefReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_sendDefRep<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_sendDefRep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_sendDefRep() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::mutex::DefRep, ::mutex::DefReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mutex::DefRep* request, ::mutex::DefReply* response) { return this->sendDefRep(context, request, response); }));}
    void SetMessageAllocatorFor_sendDefRep(
        ::grpc::MessageAllocator< ::mutex::DefRep, ::mutex::DefReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mutex::DefRep, ::mutex::DefReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_sendDefRep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendDefRep(::grpc::ServerContext* /*context*/, const ::mutex::DefRep* /*request*/, ::mutex::DefReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendDefRep(
      ::grpc::CallbackServerContext* /*context*/, const ::mutex::DefRep* /*request*/, ::mutex::DefReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_sendDefRep<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_sendDefRep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_sendDefRep() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_sendDefRep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendDefRep(::grpc::ServerContext* /*context*/, const ::mutex::DefRep* /*request*/, ::mutex::DefReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendDefRep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_sendDefRep() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_sendDefRep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendDefRep(::grpc::ServerContext* /*context*/, const ::mutex::DefRep* /*request*/, ::mutex::DefReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendDefRep(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_sendDefRep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_sendDefRep() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->sendDefRep(context, request, response); }));
    }
    ~WithRawCallbackMethod_sendDefRep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendDefRep(::grpc::ServerContext* /*context*/, const ::mutex::DefRep* /*request*/, ::mutex::DefReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendDefRep(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendDefRep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_sendDefRep() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mutex::DefRep, ::mutex::DefReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mutex::DefRep, ::mutex::DefReply>* streamer) {
                       return this->StreamedsendDefRep(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_sendDefRep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendDefRep(::grpc::ServerContext* /*context*/, const ::mutex::DefRep* /*request*/, ::mutex::DefReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendDefRep(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mutex::DefRep,::mutex::DefReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_sendDefRep<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_sendDefRep<Service > StreamedService;
};

}  // namespace mutex


#endif  // GRPC_mutex_2eproto__INCLUDED
