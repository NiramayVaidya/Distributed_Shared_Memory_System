// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mutex.proto

#include "mutex.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mutex {
constexpr PollRequest::PollRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PollRequestDefaultTypeInternal {
  constexpr PollRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PollRequestDefaultTypeInternal() {}
  union {
    PollRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PollRequestDefaultTypeInternal _PollRequest_default_instance_;
constexpr PollReply::PollReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : active_(false){}
struct PollReplyDefaultTypeInternal {
  constexpr PollReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PollReplyDefaultTypeInternal() {}
  union {
    PollReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PollReplyDefaultTypeInternal _PollReply_default_instance_;
constexpr RecvReq::RecvReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seqnum_(uint64_t{0u})
  , port_(0u){}
struct RecvReqDefaultTypeInternal {
  constexpr RecvReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecvReqDefaultTypeInternal() {}
  union {
    RecvReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecvReqDefaultTypeInternal _RecvReq_default_instance_;
constexpr RecvReply::RecvReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reply_(false){}
struct RecvReplyDefaultTypeInternal {
  constexpr RecvReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecvReplyDefaultTypeInternal() {}
  union {
    RecvReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecvReplyDefaultTypeInternal _RecvReply_default_instance_;
constexpr DefRep::DefRep(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : port_(0u){}
struct DefRepDefaultTypeInternal {
  constexpr DefRepDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DefRepDefaultTypeInternal() {}
  union {
    DefRep _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DefRepDefaultTypeInternal _DefRep_default_instance_;
constexpr DefReply::DefReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DefReplyDefaultTypeInternal {
  constexpr DefReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DefReplyDefaultTypeInternal() {}
  union {
    DefReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DefReplyDefaultTypeInternal _DefReply_default_instance_;
}  // namespace mutex
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mutex_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mutex_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mutex_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mutex_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mutex::PollRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mutex::PollReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mutex::PollReply, active_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mutex::RecvReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mutex::RecvReq, seqnum_),
  PROTOBUF_FIELD_OFFSET(::mutex::RecvReq, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mutex::RecvReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mutex::RecvReply, reply_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mutex::DefRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mutex::DefRep, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mutex::DefReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mutex::PollRequest)},
  { 5, -1, sizeof(::mutex::PollReply)},
  { 11, -1, sizeof(::mutex::RecvReq)},
  { 18, -1, sizeof(::mutex::RecvReply)},
  { 24, -1, sizeof(::mutex::DefRep)},
  { 30, -1, sizeof(::mutex::DefReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mutex::_PollRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mutex::_PollReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mutex::_RecvReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mutex::_RecvReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mutex::_DefRep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mutex::_DefReply_default_instance_),
};

const char descriptor_table_protodef_mutex_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013mutex.proto\022\005mutex\"\r\n\013PollRequest\"\033\n\tP"
  "ollReply\022\016\n\006active\030\001 \001(\010\"\'\n\007RecvReq\022\016\n\006s"
  "eqNum\030\001 \001(\004\022\014\n\004port\030\003 \001(\r\"\032\n\tRecvReply\022\r"
  "\n\005reply\030\001 \001(\010\"\026\n\006DefRep\022\014\n\004port\030\003 \001(\r\"\n\n"
  "\010DefReply26\n\004Poll\022.\n\004poll\022\022.mutex.PollRe"
  "quest\032\020.mutex.PollReply\"\0002@\n\013RecvRequest"
  "\0221\n\013recvRequest\022\016.mutex.RecvReq\032\020.mutex."
  "RecvReply\"\0002>\n\014SendDefReply\022.\n\nsendDefRe"
  "p\022\r.mutex.DefRep\032\017.mutex.DefReply\"\000b\006pro"
  "to3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mutex_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mutex_2eproto = {
  false, false, 363, descriptor_table_protodef_mutex_2eproto, "mutex.proto", 
  &descriptor_table_mutex_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_mutex_2eproto::offsets,
  file_level_metadata_mutex_2eproto, file_level_enum_descriptors_mutex_2eproto, file_level_service_descriptors_mutex_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mutex_2eproto_getter() {
  return &descriptor_table_mutex_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mutex_2eproto(&descriptor_table_mutex_2eproto);
namespace mutex {

// ===================================================================

class PollRequest::_Internal {
 public:
};

PollRequest::PollRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mutex.PollRequest)
}
PollRequest::PollRequest(const PollRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mutex.PollRequest)
}

inline void PollRequest::SharedCtor() {
}

PollRequest::~PollRequest() {
  // @@protoc_insertion_point(destructor:mutex.PollRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PollRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PollRequest::ArenaDtor(void* object) {
  PollRequest* _this = reinterpret_cast< PollRequest* >(object);
  (void)_this;
}
void PollRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PollRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PollRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mutex.PollRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PollRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PollRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mutex.PollRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mutex.PollRequest)
  return target;
}

size_t PollRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mutex.PollRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PollRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PollRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PollRequest::GetClassData() const { return &_class_data_; }

void PollRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PollRequest *>(to)->MergeFrom(
      static_cast<const PollRequest &>(from));
}


void PollRequest::MergeFrom(const PollRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mutex.PollRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PollRequest::CopyFrom(const PollRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mutex.PollRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PollRequest::IsInitialized() const {
  return true;
}

void PollRequest::InternalSwap(PollRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PollRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutex_2eproto_getter, &descriptor_table_mutex_2eproto_once,
      file_level_metadata_mutex_2eproto[0]);
}

// ===================================================================

class PollReply::_Internal {
 public:
};

PollReply::PollReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mutex.PollReply)
}
PollReply::PollReply(const PollReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  active_ = from.active_;
  // @@protoc_insertion_point(copy_constructor:mutex.PollReply)
}

inline void PollReply::SharedCtor() {
active_ = false;
}

PollReply::~PollReply() {
  // @@protoc_insertion_point(destructor:mutex.PollReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PollReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PollReply::ArenaDtor(void* object) {
  PollReply* _this = reinterpret_cast< PollReply* >(object);
  (void)_this;
}
void PollReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PollReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PollReply::Clear() {
// @@protoc_insertion_point(message_clear_start:mutex.PollReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  active_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PollReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool active = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PollReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mutex.PollReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool active = 1;
  if (this->_internal_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mutex.PollReply)
  return target;
}

size_t PollReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mutex.PollReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool active = 1;
  if (this->_internal_active() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PollReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PollReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PollReply::GetClassData() const { return &_class_data_; }

void PollReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PollReply *>(to)->MergeFrom(
      static_cast<const PollReply &>(from));
}


void PollReply::MergeFrom(const PollReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mutex.PollReply)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_active() != 0) {
    _internal_set_active(from._internal_active());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PollReply::CopyFrom(const PollReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mutex.PollReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PollReply::IsInitialized() const {
  return true;
}

void PollReply::InternalSwap(PollReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(active_, other->active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PollReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutex_2eproto_getter, &descriptor_table_mutex_2eproto_once,
      file_level_metadata_mutex_2eproto[1]);
}

// ===================================================================

class RecvReq::_Internal {
 public:
};

RecvReq::RecvReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mutex.RecvReq)
}
RecvReq::RecvReq(const RecvReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seqnum_, &from.seqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&seqnum_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:mutex.RecvReq)
}

inline void RecvReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seqnum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&seqnum_)) + sizeof(port_));
}

RecvReq::~RecvReq() {
  // @@protoc_insertion_point(destructor:mutex.RecvReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RecvReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecvReq::ArenaDtor(void* object) {
  RecvReq* _this = reinterpret_cast< RecvReq* >(object);
  (void)_this;
}
void RecvReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecvReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecvReq::Clear() {
// @@protoc_insertion_point(message_clear_start:mutex.RecvReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seqnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&seqnum_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecvReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 seqNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecvReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mutex.RecvReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 seqNum = 1;
  if (this->_internal_seqnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_seqnum(), target);
  }

  // uint32 port = 3;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mutex.RecvReq)
  return target;
}

size_t RecvReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mutex.RecvReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 seqNum = 1;
  if (this->_internal_seqnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seqnum());
  }

  // uint32 port = 3;
  if (this->_internal_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecvReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecvReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecvReq::GetClassData() const { return &_class_data_; }

void RecvReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RecvReq *>(to)->MergeFrom(
      static_cast<const RecvReq &>(from));
}


void RecvReq::MergeFrom(const RecvReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mutex.RecvReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_seqnum() != 0) {
    _internal_set_seqnum(from._internal_seqnum());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecvReq::CopyFrom(const RecvReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mutex.RecvReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvReq::IsInitialized() const {
  return true;
}

void RecvReq::InternalSwap(RecvReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecvReq, port_)
      + sizeof(RecvReq::port_)
      - PROTOBUF_FIELD_OFFSET(RecvReq, seqnum_)>(
          reinterpret_cast<char*>(&seqnum_),
          reinterpret_cast<char*>(&other->seqnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecvReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutex_2eproto_getter, &descriptor_table_mutex_2eproto_once,
      file_level_metadata_mutex_2eproto[2]);
}

// ===================================================================

class RecvReply::_Internal {
 public:
};

RecvReply::RecvReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mutex.RecvReply)
}
RecvReply::RecvReply(const RecvReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reply_ = from.reply_;
  // @@protoc_insertion_point(copy_constructor:mutex.RecvReply)
}

inline void RecvReply::SharedCtor() {
reply_ = false;
}

RecvReply::~RecvReply() {
  // @@protoc_insertion_point(destructor:mutex.RecvReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RecvReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecvReply::ArenaDtor(void* object) {
  RecvReply* _this = reinterpret_cast< RecvReply* >(object);
  (void)_this;
}
void RecvReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecvReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecvReply::Clear() {
// @@protoc_insertion_point(message_clear_start:mutex.RecvReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reply_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecvReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecvReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mutex.RecvReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool reply = 1;
  if (this->_internal_reply() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_reply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mutex.RecvReply)
  return target;
}

size_t RecvReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mutex.RecvReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool reply = 1;
  if (this->_internal_reply() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecvReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecvReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecvReply::GetClassData() const { return &_class_data_; }

void RecvReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RecvReply *>(to)->MergeFrom(
      static_cast<const RecvReply &>(from));
}


void RecvReply::MergeFrom(const RecvReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mutex.RecvReply)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_reply() != 0) {
    _internal_set_reply(from._internal_reply());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecvReply::CopyFrom(const RecvReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mutex.RecvReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvReply::IsInitialized() const {
  return true;
}

void RecvReply::InternalSwap(RecvReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(reply_, other->reply_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecvReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutex_2eproto_getter, &descriptor_table_mutex_2eproto_once,
      file_level_metadata_mutex_2eproto[3]);
}

// ===================================================================

class DefRep::_Internal {
 public:
};

DefRep::DefRep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mutex.DefRep)
}
DefRep::DefRep(const DefRep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:mutex.DefRep)
}

inline void DefRep::SharedCtor() {
port_ = 0u;
}

DefRep::~DefRep() {
  // @@protoc_insertion_point(destructor:mutex.DefRep)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DefRep::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DefRep::ArenaDtor(void* object) {
  DefRep* _this = reinterpret_cast< DefRep* >(object);
  (void)_this;
}
void DefRep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DefRep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DefRep::Clear() {
// @@protoc_insertion_point(message_clear_start:mutex.DefRep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DefRep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DefRep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mutex.DefRep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port = 3;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mutex.DefRep)
  return target;
}

size_t DefRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mutex.DefRep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 port = 3;
  if (this->_internal_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DefRep::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DefRep::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DefRep::GetClassData() const { return &_class_data_; }

void DefRep::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DefRep *>(to)->MergeFrom(
      static_cast<const DefRep &>(from));
}


void DefRep::MergeFrom(const DefRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mutex.DefRep)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DefRep::CopyFrom(const DefRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mutex.DefRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefRep::IsInitialized() const {
  return true;
}

void DefRep::InternalSwap(DefRep* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DefRep::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutex_2eproto_getter, &descriptor_table_mutex_2eproto_once,
      file_level_metadata_mutex_2eproto[4]);
}

// ===================================================================

class DefReply::_Internal {
 public:
};

DefReply::DefReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mutex.DefReply)
}
DefReply::DefReply(const DefReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mutex.DefReply)
}

inline void DefReply::SharedCtor() {
}

DefReply::~DefReply() {
  // @@protoc_insertion_point(destructor:mutex.DefReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DefReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DefReply::ArenaDtor(void* object) {
  DefReply* _this = reinterpret_cast< DefReply* >(object);
  (void)_this;
}
void DefReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DefReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DefReply::Clear() {
// @@protoc_insertion_point(message_clear_start:mutex.DefReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DefReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DefReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mutex.DefReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mutex.DefReply)
  return target;
}

size_t DefReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mutex.DefReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DefReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DefReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DefReply::GetClassData() const { return &_class_data_; }

void DefReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DefReply *>(to)->MergeFrom(
      static_cast<const DefReply &>(from));
}


void DefReply::MergeFrom(const DefReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mutex.DefReply)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DefReply::CopyFrom(const DefReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mutex.DefReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefReply::IsInitialized() const {
  return true;
}

void DefReply::InternalSwap(DefReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DefReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutex_2eproto_getter, &descriptor_table_mutex_2eproto_once,
      file_level_metadata_mutex_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mutex
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mutex::PollRequest* Arena::CreateMaybeMessage< ::mutex::PollRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mutex::PollRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mutex::PollReply* Arena::CreateMaybeMessage< ::mutex::PollReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mutex::PollReply >(arena);
}
template<> PROTOBUF_NOINLINE ::mutex::RecvReq* Arena::CreateMaybeMessage< ::mutex::RecvReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mutex::RecvReq >(arena);
}
template<> PROTOBUF_NOINLINE ::mutex::RecvReply* Arena::CreateMaybeMessage< ::mutex::RecvReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mutex::RecvReply >(arena);
}
template<> PROTOBUF_NOINLINE ::mutex::DefRep* Arena::CreateMaybeMessage< ::mutex::DefRep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mutex::DefRep >(arena);
}
template<> PROTOBUF_NOINLINE ::mutex::DefReply* Arena::CreateMaybeMessage< ::mutex::DefReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mutex::DefReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
