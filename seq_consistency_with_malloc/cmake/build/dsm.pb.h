// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dsm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dsm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dsm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dsm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dsm_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dsm_2eproto;
namespace dsm {
class FetchReply;
struct FetchReplyDefaultTypeInternal;
extern FetchReplyDefaultTypeInternal _FetchReply_default_instance_;
class FetchRequest;
struct FetchRequestDefaultTypeInternal;
extern FetchRequestDefaultTypeInternal _FetchRequest_default_instance_;
class InvalidateReply;
struct InvalidateReplyDefaultTypeInternal;
extern InvalidateReplyDefaultTypeInternal _InvalidateReply_default_instance_;
class InvalidateRequest;
struct InvalidateRequestDefaultTypeInternal;
extern InvalidateRequestDefaultTypeInternal _InvalidateRequest_default_instance_;
class LatestReply;
struct LatestReplyDefaultTypeInternal;
extern LatestReplyDefaultTypeInternal _LatestReply_default_instance_;
class LatestRequest;
struct LatestRequestDefaultTypeInternal;
extern LatestRequestDefaultTypeInternal _LatestRequest_default_instance_;
class PollReply;
struct PollReplyDefaultTypeInternal;
extern PollReplyDefaultTypeInternal _PollReply_default_instance_;
class PollRequest;
struct PollRequestDefaultTypeInternal;
extern PollRequestDefaultTypeInternal _PollRequest_default_instance_;
class RegReply;
struct RegReplyDefaultTypeInternal;
extern RegReplyDefaultTypeInternal _RegReply_default_instance_;
class RegRequest;
struct RegRequestDefaultTypeInternal;
extern RegRequestDefaultTypeInternal _RegRequest_default_instance_;
class UpdReply;
struct UpdReplyDefaultTypeInternal;
extern UpdReplyDefaultTypeInternal _UpdReply_default_instance_;
class UpdRequest;
struct UpdRequestDefaultTypeInternal;
extern UpdRequestDefaultTypeInternal _UpdRequest_default_instance_;
}  // namespace dsm
PROTOBUF_NAMESPACE_OPEN
template<> ::dsm::FetchReply* Arena::CreateMaybeMessage<::dsm::FetchReply>(Arena*);
template<> ::dsm::FetchRequest* Arena::CreateMaybeMessage<::dsm::FetchRequest>(Arena*);
template<> ::dsm::InvalidateReply* Arena::CreateMaybeMessage<::dsm::InvalidateReply>(Arena*);
template<> ::dsm::InvalidateRequest* Arena::CreateMaybeMessage<::dsm::InvalidateRequest>(Arena*);
template<> ::dsm::LatestReply* Arena::CreateMaybeMessage<::dsm::LatestReply>(Arena*);
template<> ::dsm::LatestRequest* Arena::CreateMaybeMessage<::dsm::LatestRequest>(Arena*);
template<> ::dsm::PollReply* Arena::CreateMaybeMessage<::dsm::PollReply>(Arena*);
template<> ::dsm::PollRequest* Arena::CreateMaybeMessage<::dsm::PollRequest>(Arena*);
template<> ::dsm::RegReply* Arena::CreateMaybeMessage<::dsm::RegReply>(Arena*);
template<> ::dsm::RegRequest* Arena::CreateMaybeMessage<::dsm::RegRequest>(Arena*);
template<> ::dsm::UpdReply* Arena::CreateMaybeMessage<::dsm::UpdReply>(Arena*);
template<> ::dsm::UpdRequest* Arena::CreateMaybeMessage<::dsm::UpdRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dsm {

// ===================================================================

class PollRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dsm.PollRequest) */ {
 public:
  inline PollRequest() : PollRequest(nullptr) {}
  ~PollRequest() override;
  explicit constexpr PollRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PollRequest(const PollRequest& from);
  PollRequest(PollRequest&& from) noexcept
    : PollRequest() {
    *this = ::std::move(from);
  }

  inline PollRequest& operator=(const PollRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PollRequest& operator=(PollRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PollRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PollRequest* internal_default_instance() {
    return reinterpret_cast<const PollRequest*>(
               &_PollRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PollRequest& a, PollRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PollRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PollRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PollRequest* New() const final {
    return new PollRequest();
  }

  PollRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PollRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PollRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PollRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PollRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dsm.PollRequest";
  }
  protected:
  explicit PollRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dsm.PollRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dsm_2eproto;
};
// -------------------------------------------------------------------

class PollReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dsm.PollReply) */ {
 public:
  inline PollReply() : PollReply(nullptr) {}
  ~PollReply() override;
  explicit constexpr PollReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PollReply(const PollReply& from);
  PollReply(PollReply&& from) noexcept
    : PollReply() {
    *this = ::std::move(from);
  }

  inline PollReply& operator=(const PollReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PollReply& operator=(PollReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PollReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const PollReply* internal_default_instance() {
    return reinterpret_cast<const PollReply*>(
               &_PollReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PollReply& a, PollReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PollReply* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PollReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PollReply* New() const final {
    return new PollReply();
  }

  PollReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PollReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PollReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PollReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PollReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dsm.PollReply";
  }
  protected:
  explicit PollReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActiveFieldNumber = 1,
  };
  // bool active = 1;
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dsm.PollReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dsm_2eproto;
};
// -------------------------------------------------------------------

class RegRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dsm.RegRequest) */ {
 public:
  inline RegRequest() : RegRequest(nullptr) {}
  ~RegRequest() override;
  explicit constexpr RegRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegRequest(const RegRequest& from);
  RegRequest(RegRequest&& from) noexcept
    : RegRequest() {
    *this = ::std::move(from);
  }

  inline RegRequest& operator=(const RegRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegRequest& operator=(RegRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegRequest* internal_default_instance() {
    return reinterpret_cast<const RegRequest*>(
               &_RegRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegRequest& a, RegRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegRequest* New() const final {
    return new RegRequest();
  }

  RegRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dsm.RegRequest";
  }
  protected:
  explicit RegRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
    kPageAddrFieldNumber = 3,
    kPageNumFieldNumber = 2,
    kSizeFieldNumber = 4,
  };
  // string host = 1;
  void clear_host();
  const std::string& host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host();
  PROTOBUF_MUST_USE_RESULT std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // uint64 pageAddr = 3;
  void clear_pageaddr();
  ::PROTOBUF_NAMESPACE_ID::uint64 pageaddr() const;
  void set_pageaddr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pageaddr() const;
  void _internal_set_pageaddr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 pageNum = 2;
  void clear_pagenum();
  ::PROTOBUF_NAMESPACE_ID::uint32 pagenum() const;
  void set_pagenum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pagenum() const;
  void _internal_set_pagenum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 size = 4;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:dsm.RegRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pageaddr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pagenum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dsm_2eproto;
};
// -------------------------------------------------------------------

class RegReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dsm.RegReply) */ {
 public:
  inline RegReply() : RegReply(nullptr) {}
  ~RegReply() override;
  explicit constexpr RegReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegReply(const RegReply& from);
  RegReply(RegReply&& from) noexcept
    : RegReply() {
    *this = ::std::move(from);
  }

  inline RegReply& operator=(const RegReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegReply& operator=(RegReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegReply* internal_default_instance() {
    return reinterpret_cast<const RegReply*>(
               &_RegReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegReply& a, RegReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RegReply* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegReply* New() const final {
    return new RegReply();
  }

  RegReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dsm.RegReply";
  }
  protected:
  explicit RegReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageNumFieldNumber = 1,
  };
  // uint32 pageNum = 1;
  void clear_pagenum();
  ::PROTOBUF_NAMESPACE_ID::uint32 pagenum() const;
  void set_pagenum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pagenum() const;
  void _internal_set_pagenum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:dsm.RegReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pagenum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dsm_2eproto;
};
// -------------------------------------------------------------------

class UpdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dsm.UpdRequest) */ {
 public:
  inline UpdRequest() : UpdRequest(nullptr) {}
  ~UpdRequest() override;
  explicit constexpr UpdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdRequest(const UpdRequest& from);
  UpdRequest(UpdRequest&& from) noexcept
    : UpdRequest() {
    *this = ::std::move(from);
  }

  inline UpdRequest& operator=(const UpdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdRequest& operator=(UpdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdRequest* internal_default_instance() {
    return reinterpret_cast<const UpdRequest*>(
               &_UpdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdRequest& a, UpdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdRequest* New() const final {
    return new UpdRequest();
  }

  UpdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dsm.UpdRequest";
  }
  protected:
  explicit UpdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
    kPageAddrFieldNumber = 2,
  };
  // string host = 1;
  void clear_host();
  const std::string& host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host();
  PROTOBUF_MUST_USE_RESULT std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // uint64 pageAddr = 2;
  void clear_pageaddr();
  ::PROTOBUF_NAMESPACE_ID::uint64 pageaddr() const;
  void set_pageaddr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pageaddr() const;
  void _internal_set_pageaddr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:dsm.UpdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pageaddr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dsm_2eproto;
};
// -------------------------------------------------------------------

class UpdReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dsm.UpdReply) */ {
 public:
  inline UpdReply() : UpdReply(nullptr) {}
  ~UpdReply() override;
  explicit constexpr UpdReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdReply(const UpdReply& from);
  UpdReply(UpdReply&& from) noexcept
    : UpdReply() {
    *this = ::std::move(from);
  }

  inline UpdReply& operator=(const UpdReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdReply& operator=(UpdReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdReply* internal_default_instance() {
    return reinterpret_cast<const UpdReply*>(
               &_UpdReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdReply& a, UpdReply& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdReply* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdReply* New() const final {
    return new UpdReply();
  }

  UpdReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dsm.UpdReply";
  }
  protected:
  explicit UpdReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dsm.UpdReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dsm_2eproto;
};
// -------------------------------------------------------------------

class InvalidateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dsm.InvalidateRequest) */ {
 public:
  inline InvalidateRequest() : InvalidateRequest(nullptr) {}
  ~InvalidateRequest() override;
  explicit constexpr InvalidateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvalidateRequest(const InvalidateRequest& from);
  InvalidateRequest(InvalidateRequest&& from) noexcept
    : InvalidateRequest() {
    *this = ::std::move(from);
  }

  inline InvalidateRequest& operator=(const InvalidateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvalidateRequest& operator=(InvalidateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvalidateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvalidateRequest* internal_default_instance() {
    return reinterpret_cast<const InvalidateRequest*>(
               &_InvalidateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(InvalidateRequest& a, InvalidateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InvalidateRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvalidateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InvalidateRequest* New() const final {
    return new InvalidateRequest();
  }

  InvalidateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InvalidateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InvalidateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InvalidateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvalidateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dsm.InvalidateRequest";
  }
  protected:
  explicit InvalidateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageAddrFieldNumber = 1,
  };
  // uint64 pageAddr = 1;
  void clear_pageaddr();
  ::PROTOBUF_NAMESPACE_ID::uint64 pageaddr() const;
  void set_pageaddr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pageaddr() const;
  void _internal_set_pageaddr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:dsm.InvalidateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pageaddr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dsm_2eproto;
};
// -------------------------------------------------------------------

class InvalidateReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dsm.InvalidateReply) */ {
 public:
  inline InvalidateReply() : InvalidateReply(nullptr) {}
  ~InvalidateReply() override;
  explicit constexpr InvalidateReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvalidateReply(const InvalidateReply& from);
  InvalidateReply(InvalidateReply&& from) noexcept
    : InvalidateReply() {
    *this = ::std::move(from);
  }

  inline InvalidateReply& operator=(const InvalidateReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvalidateReply& operator=(InvalidateReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvalidateReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvalidateReply* internal_default_instance() {
    return reinterpret_cast<const InvalidateReply*>(
               &_InvalidateReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(InvalidateReply& a, InvalidateReply& b) {
    a.Swap(&b);
  }
  inline void Swap(InvalidateReply* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvalidateReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InvalidateReply* New() const final {
    return new InvalidateReply();
  }

  InvalidateReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InvalidateReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InvalidateReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InvalidateReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvalidateReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dsm.InvalidateReply";
  }
  protected:
  explicit InvalidateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dsm.InvalidateReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dsm_2eproto;
};
// -------------------------------------------------------------------

class LatestRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dsm.LatestRequest) */ {
 public:
  inline LatestRequest() : LatestRequest(nullptr) {}
  ~LatestRequest() override;
  explicit constexpr LatestRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LatestRequest(const LatestRequest& from);
  LatestRequest(LatestRequest&& from) noexcept
    : LatestRequest() {
    *this = ::std::move(from);
  }

  inline LatestRequest& operator=(const LatestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LatestRequest& operator=(LatestRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LatestRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LatestRequest* internal_default_instance() {
    return reinterpret_cast<const LatestRequest*>(
               &_LatestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LatestRequest& a, LatestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LatestRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LatestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LatestRequest* New() const final {
    return new LatestRequest();
  }

  LatestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LatestRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LatestRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LatestRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatestRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dsm.LatestRequest";
  }
  protected:
  explicit LatestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
    kPageAddrFieldNumber = 2,
  };
  // string host = 1;
  void clear_host();
  const std::string& host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host();
  PROTOBUF_MUST_USE_RESULT std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // uint64 pageAddr = 2;
  void clear_pageaddr();
  ::PROTOBUF_NAMESPACE_ID::uint64 pageaddr() const;
  void set_pageaddr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pageaddr() const;
  void _internal_set_pageaddr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:dsm.LatestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pageaddr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dsm_2eproto;
};
// -------------------------------------------------------------------

class LatestReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dsm.LatestReply) */ {
 public:
  inline LatestReply() : LatestReply(nullptr) {}
  ~LatestReply() override;
  explicit constexpr LatestReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LatestReply(const LatestReply& from);
  LatestReply(LatestReply&& from) noexcept
    : LatestReply() {
    *this = ::std::move(from);
  }

  inline LatestReply& operator=(const LatestReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline LatestReply& operator=(LatestReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LatestReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const LatestReply* internal_default_instance() {
    return reinterpret_cast<const LatestReply*>(
               &_LatestReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LatestReply& a, LatestReply& b) {
    a.Swap(&b);
  }
  inline void Swap(LatestReply* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LatestReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LatestReply* New() const final {
    return new LatestReply();
  }

  LatestReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LatestReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LatestReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LatestReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatestReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dsm.LatestReply";
  }
  protected:
  explicit LatestReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageContentFieldNumber = 1,
  };
  // repeated uint64 pageContent = 1;
  int pagecontent_size() const;
  private:
  int _internal_pagecontent_size() const;
  public:
  void clear_pagecontent();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pagecontent(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_pagecontent() const;
  void _internal_add_pagecontent(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_pagecontent();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 pagecontent(int index) const;
  void set_pagecontent(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_pagecontent(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      pagecontent() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_pagecontent();

  // @@protoc_insertion_point(class_scope:dsm.LatestReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > pagecontent_;
  mutable std::atomic<int> _pagecontent_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dsm_2eproto;
};
// -------------------------------------------------------------------

class FetchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dsm.FetchRequest) */ {
 public:
  inline FetchRequest() : FetchRequest(nullptr) {}
  ~FetchRequest() override;
  explicit constexpr FetchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchRequest(const FetchRequest& from);
  FetchRequest(FetchRequest&& from) noexcept
    : FetchRequest() {
    *this = ::std::move(from);
  }

  inline FetchRequest& operator=(const FetchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchRequest& operator=(FetchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchRequest* internal_default_instance() {
    return reinterpret_cast<const FetchRequest*>(
               &_FetchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(FetchRequest& a, FetchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchRequest* New() const final {
    return new FetchRequest();
  }

  FetchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FetchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FetchRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dsm.FetchRequest";
  }
  protected:
  explicit FetchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageAddrFieldNumber = 1,
  };
  // uint64 pageAddr = 1;
  void clear_pageaddr();
  ::PROTOBUF_NAMESPACE_ID::uint64 pageaddr() const;
  void set_pageaddr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pageaddr() const;
  void _internal_set_pageaddr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:dsm.FetchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pageaddr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dsm_2eproto;
};
// -------------------------------------------------------------------

class FetchReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dsm.FetchReply) */ {
 public:
  inline FetchReply() : FetchReply(nullptr) {}
  ~FetchReply() override;
  explicit constexpr FetchReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchReply(const FetchReply& from);
  FetchReply(FetchReply&& from) noexcept
    : FetchReply() {
    *this = ::std::move(from);
  }

  inline FetchReply& operator=(const FetchReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchReply& operator=(FetchReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchReply* internal_default_instance() {
    return reinterpret_cast<const FetchReply*>(
               &_FetchReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(FetchReply& a, FetchReply& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchReply* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchReply* New() const final {
    return new FetchReply();
  }

  FetchReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FetchReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FetchReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dsm.FetchReply";
  }
  protected:
  explicit FetchReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageContentFieldNumber = 1,
  };
  // repeated uint64 pageContent = 1;
  int pagecontent_size() const;
  private:
  int _internal_pagecontent_size() const;
  public:
  void clear_pagecontent();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pagecontent(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_pagecontent() const;
  void _internal_add_pagecontent(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_pagecontent();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 pagecontent(int index) const;
  void set_pagecontent(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_pagecontent(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      pagecontent() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_pagecontent();

  // @@protoc_insertion_point(class_scope:dsm.FetchReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > pagecontent_;
  mutable std::atomic<int> _pagecontent_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dsm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PollRequest

// -------------------------------------------------------------------

// PollReply

// bool active = 1;
inline void PollReply::clear_active() {
  active_ = false;
}
inline bool PollReply::_internal_active() const {
  return active_;
}
inline bool PollReply::active() const {
  // @@protoc_insertion_point(field_get:dsm.PollReply.active)
  return _internal_active();
}
inline void PollReply::_internal_set_active(bool value) {
  
  active_ = value;
}
inline void PollReply::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:dsm.PollReply.active)
}

// -------------------------------------------------------------------

// RegRequest

// string host = 1;
inline void RegRequest::clear_host() {
  host_.ClearToEmpty();
}
inline const std::string& RegRequest::host() const {
  // @@protoc_insertion_point(field_get:dsm.RegRequest.host)
  return _internal_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegRequest::set_host(ArgT0&& arg0, ArgT... args) {
 
 host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dsm.RegRequest.host)
}
inline std::string* RegRequest::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:dsm.RegRequest.host)
  return _s;
}
inline const std::string& RegRequest::_internal_host() const {
  return host_.Get();
}
inline void RegRequest::_internal_set_host(const std::string& value) {
  
  host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegRequest::_internal_mutable_host() {
  
  return host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegRequest::release_host() {
  // @@protoc_insertion_point(field_release:dsm.RegRequest.host)
  return host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegRequest::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:dsm.RegRequest.host)
}

// uint32 pageNum = 2;
inline void RegRequest::clear_pagenum() {
  pagenum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegRequest::_internal_pagenum() const {
  return pagenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegRequest::pagenum() const {
  // @@protoc_insertion_point(field_get:dsm.RegRequest.pageNum)
  return _internal_pagenum();
}
inline void RegRequest::_internal_set_pagenum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pagenum_ = value;
}
inline void RegRequest::set_pagenum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pagenum(value);
  // @@protoc_insertion_point(field_set:dsm.RegRequest.pageNum)
}

// uint64 pageAddr = 3;
inline void RegRequest::clear_pageaddr() {
  pageaddr_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RegRequest::_internal_pageaddr() const {
  return pageaddr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RegRequest::pageaddr() const {
  // @@protoc_insertion_point(field_get:dsm.RegRequest.pageAddr)
  return _internal_pageaddr();
}
inline void RegRequest::_internal_set_pageaddr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pageaddr_ = value;
}
inline void RegRequest::set_pageaddr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pageaddr(value);
  // @@protoc_insertion_point(field_set:dsm.RegRequest.pageAddr)
}

// uint32 size = 4;
inline void RegRequest::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegRequest::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegRequest::size() const {
  // @@protoc_insertion_point(field_get:dsm.RegRequest.size)
  return _internal_size();
}
inline void RegRequest::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void RegRequest::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:dsm.RegRequest.size)
}

// -------------------------------------------------------------------

// RegReply

// uint32 pageNum = 1;
inline void RegReply::clear_pagenum() {
  pagenum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegReply::_internal_pagenum() const {
  return pagenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegReply::pagenum() const {
  // @@protoc_insertion_point(field_get:dsm.RegReply.pageNum)
  return _internal_pagenum();
}
inline void RegReply::_internal_set_pagenum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pagenum_ = value;
}
inline void RegReply::set_pagenum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pagenum(value);
  // @@protoc_insertion_point(field_set:dsm.RegReply.pageNum)
}

// -------------------------------------------------------------------

// UpdRequest

// string host = 1;
inline void UpdRequest::clear_host() {
  host_.ClearToEmpty();
}
inline const std::string& UpdRequest::host() const {
  // @@protoc_insertion_point(field_get:dsm.UpdRequest.host)
  return _internal_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdRequest::set_host(ArgT0&& arg0, ArgT... args) {
 
 host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dsm.UpdRequest.host)
}
inline std::string* UpdRequest::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:dsm.UpdRequest.host)
  return _s;
}
inline const std::string& UpdRequest::_internal_host() const {
  return host_.Get();
}
inline void UpdRequest::_internal_set_host(const std::string& value) {
  
  host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdRequest::_internal_mutable_host() {
  
  return host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdRequest::release_host() {
  // @@protoc_insertion_point(field_release:dsm.UpdRequest.host)
  return host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdRequest::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:dsm.UpdRequest.host)
}

// uint64 pageAddr = 2;
inline void UpdRequest::clear_pageaddr() {
  pageaddr_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdRequest::_internal_pageaddr() const {
  return pageaddr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdRequest::pageaddr() const {
  // @@protoc_insertion_point(field_get:dsm.UpdRequest.pageAddr)
  return _internal_pageaddr();
}
inline void UpdRequest::_internal_set_pageaddr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pageaddr_ = value;
}
inline void UpdRequest::set_pageaddr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pageaddr(value);
  // @@protoc_insertion_point(field_set:dsm.UpdRequest.pageAddr)
}

// -------------------------------------------------------------------

// UpdReply

// -------------------------------------------------------------------

// InvalidateRequest

// uint64 pageAddr = 1;
inline void InvalidateRequest::clear_pageaddr() {
  pageaddr_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InvalidateRequest::_internal_pageaddr() const {
  return pageaddr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InvalidateRequest::pageaddr() const {
  // @@protoc_insertion_point(field_get:dsm.InvalidateRequest.pageAddr)
  return _internal_pageaddr();
}
inline void InvalidateRequest::_internal_set_pageaddr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pageaddr_ = value;
}
inline void InvalidateRequest::set_pageaddr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pageaddr(value);
  // @@protoc_insertion_point(field_set:dsm.InvalidateRequest.pageAddr)
}

// -------------------------------------------------------------------

// InvalidateReply

// -------------------------------------------------------------------

// LatestRequest

// string host = 1;
inline void LatestRequest::clear_host() {
  host_.ClearToEmpty();
}
inline const std::string& LatestRequest::host() const {
  // @@protoc_insertion_point(field_get:dsm.LatestRequest.host)
  return _internal_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LatestRequest::set_host(ArgT0&& arg0, ArgT... args) {
 
 host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dsm.LatestRequest.host)
}
inline std::string* LatestRequest::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:dsm.LatestRequest.host)
  return _s;
}
inline const std::string& LatestRequest::_internal_host() const {
  return host_.Get();
}
inline void LatestRequest::_internal_set_host(const std::string& value) {
  
  host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LatestRequest::_internal_mutable_host() {
  
  return host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LatestRequest::release_host() {
  // @@protoc_insertion_point(field_release:dsm.LatestRequest.host)
  return host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LatestRequest::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:dsm.LatestRequest.host)
}

// uint64 pageAddr = 2;
inline void LatestRequest::clear_pageaddr() {
  pageaddr_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LatestRequest::_internal_pageaddr() const {
  return pageaddr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LatestRequest::pageaddr() const {
  // @@protoc_insertion_point(field_get:dsm.LatestRequest.pageAddr)
  return _internal_pageaddr();
}
inline void LatestRequest::_internal_set_pageaddr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pageaddr_ = value;
}
inline void LatestRequest::set_pageaddr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pageaddr(value);
  // @@protoc_insertion_point(field_set:dsm.LatestRequest.pageAddr)
}

// -------------------------------------------------------------------

// LatestReply

// repeated uint64 pageContent = 1;
inline int LatestReply::_internal_pagecontent_size() const {
  return pagecontent_.size();
}
inline int LatestReply::pagecontent_size() const {
  return _internal_pagecontent_size();
}
inline void LatestReply::clear_pagecontent() {
  pagecontent_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LatestReply::_internal_pagecontent(int index) const {
  return pagecontent_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LatestReply::pagecontent(int index) const {
  // @@protoc_insertion_point(field_get:dsm.LatestReply.pageContent)
  return _internal_pagecontent(index);
}
inline void LatestReply::set_pagecontent(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  pagecontent_.Set(index, value);
  // @@protoc_insertion_point(field_set:dsm.LatestReply.pageContent)
}
inline void LatestReply::_internal_add_pagecontent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  pagecontent_.Add(value);
}
inline void LatestReply::add_pagecontent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_pagecontent(value);
  // @@protoc_insertion_point(field_add:dsm.LatestReply.pageContent)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
LatestReply::_internal_pagecontent() const {
  return pagecontent_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
LatestReply::pagecontent() const {
  // @@protoc_insertion_point(field_list:dsm.LatestReply.pageContent)
  return _internal_pagecontent();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
LatestReply::_internal_mutable_pagecontent() {
  return &pagecontent_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
LatestReply::mutable_pagecontent() {
  // @@protoc_insertion_point(field_mutable_list:dsm.LatestReply.pageContent)
  return _internal_mutable_pagecontent();
}

// -------------------------------------------------------------------

// FetchRequest

// uint64 pageAddr = 1;
inline void FetchRequest::clear_pageaddr() {
  pageaddr_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FetchRequest::_internal_pageaddr() const {
  return pageaddr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FetchRequest::pageaddr() const {
  // @@protoc_insertion_point(field_get:dsm.FetchRequest.pageAddr)
  return _internal_pageaddr();
}
inline void FetchRequest::_internal_set_pageaddr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pageaddr_ = value;
}
inline void FetchRequest::set_pageaddr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pageaddr(value);
  // @@protoc_insertion_point(field_set:dsm.FetchRequest.pageAddr)
}

// -------------------------------------------------------------------

// FetchReply

// repeated uint64 pageContent = 1;
inline int FetchReply::_internal_pagecontent_size() const {
  return pagecontent_.size();
}
inline int FetchReply::pagecontent_size() const {
  return _internal_pagecontent_size();
}
inline void FetchReply::clear_pagecontent() {
  pagecontent_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FetchReply::_internal_pagecontent(int index) const {
  return pagecontent_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FetchReply::pagecontent(int index) const {
  // @@protoc_insertion_point(field_get:dsm.FetchReply.pageContent)
  return _internal_pagecontent(index);
}
inline void FetchReply::set_pagecontent(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  pagecontent_.Set(index, value);
  // @@protoc_insertion_point(field_set:dsm.FetchReply.pageContent)
}
inline void FetchReply::_internal_add_pagecontent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  pagecontent_.Add(value);
}
inline void FetchReply::add_pagecontent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_pagecontent(value);
  // @@protoc_insertion_point(field_add:dsm.FetchReply.pageContent)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
FetchReply::_internal_pagecontent() const {
  return pagecontent_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
FetchReply::pagecontent() const {
  // @@protoc_insertion_point(field_list:dsm.FetchReply.pageContent)
  return _internal_pagecontent();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
FetchReply::_internal_mutable_pagecontent() {
  return &pagecontent_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
FetchReply::mutable_pagecontent() {
  // @@protoc_insertion_point(field_mutable_list:dsm.FetchReply.pageContent)
  return _internal_mutable_pagecontent();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dsm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dsm_2eproto
