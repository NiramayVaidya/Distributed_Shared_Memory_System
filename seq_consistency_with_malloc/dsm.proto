syntax = "proto3";

package dsm;

service Poll {
	rpc poll (PollRequest) returns (PollReply) {}
}

service RegDataSeg {
	rpc regDataSeg (RegRequest) returns (RegReply) {}
}

service DirUpd {
	rpc dirUpd (UpdRequest) returns (UpdReply) {}
}

service DirUpdAlloc {
	rpc dirUpdAlloc (UpdAllocRequest) returns (UpdAllocReply) {}
}

service Invalidate {
	rpc invalidate (InvalidateRequest) returns (InvalidateReply) {}
}

service InvalidateAlloc {
	rpc invalidateAlloc (InvalidateAllocRequest) returns (InvalidateAllocReply) {}
}

service GetLatest {
	rpc getLatest (LatestRequest) returns (LatestReply) {}
}

service GetLatestAlloc {
	rpc getLatestAlloc (LatestAllocRequest) returns (LatestAllocReply) {}
}

service FetchLatest {
	rpc fetchLatest (FetchRequest) returns (FetchReply) {}
}

service FetchLatestAlloc {
	rpc fetchLatestAlloc (FetchAllocRequest) returns (FetchAllocReply) {}
}

service CheckAllocate {
	rpc checkAllocate (CheckRequest) returns (CheckReply) {}
}

service CheckAllocatePointer {
	rpc checkAllocatePointer (CheckPointerRequest) returns (CheckPointerReply) {}
}

service GetPointer {
	rpc getPointer (PointerRequest) returns (PointerReply) {}
}

service Allocate {
	rpc allocate (AllocRequest) returns (AllocReply) {}
}

message PollRequest {

}

message PollReply {
	bool active = 1;
}

message RegRequest {
	string host = 1;
	uint32 pageNum = 2;
	uint64 pageAddr = 3;
	uint32 size = 4;
}

message RegReply {
	uint32 pageNum = 1;
}

message UpdRequest {
	string host = 1;
	uint64 pageAddr = 2;
}

message UpdReply {

}

message UpdAllocRequest {
	string host = 1;
	uint64 pointer = 2;
}

message UpdAllocReply {

}

message InvalidateRequest {
	uint64 pageAddr = 1;
}

message InvalidateReply {

}

message InvalidateAllocRequest {
	uint64 pointer = 1;
}

message InvalidateAllocReply {

}

message LatestRequest {
	string host = 1;
	uint64 pageAddr = 2;
}

message LatestReply {
	repeated uint64 pageContent = 1;
}

message LatestAllocRequest {
	string host = 1;
	uint64 pointer = 2;
}

message LatestAllocReply {
	repeated uint64 pageContent = 1;
}

message FetchRequest {
	uint64 pageAddr = 1;
}

message FetchReply {
	repeated uint64 pageContent = 1;
}

message FetchAllocRequest {
	uint64 pointer = 1;
}

message FetchAllocReply {
	repeated uint64 pageContent = 1;
}

message CheckRequest {
	string host = 1;
	string name = 2;
}

message CheckReply {
	bool present = 1;
}

message CheckPointerRequest {
	string host = 1;
	uint64 pointer = 2;
}

message CheckPointerReply {
	bool present = 1;
}

message PointerRequest {
	string host = 1;
	string name = 2;
}

message PointerReply {
	uint64 pointer = 1;
}

message AllocRequest {
	string host = 1;
	string name = 2;
	uint64 pointer = 3;
	uint32 size = 4;
}

message AllocReply {
}
